// eth_std_main_system_peripheral_subsystem_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module eth_std_main_system_peripheral_subsystem_mm_interconnect_0 (
		input  wire        clk_clk_clk,                                         //                                       clk_clk.clk
		input  wire        peripheral_bridge_reset_reset_bridge_in_reset_reset, // peripheral_bridge_reset_reset_bridge_in_reset.reset
		input  wire [7:0]  peripheral_bridge_m0_address,                        //                          peripheral_bridge_m0.address
		output wire        peripheral_bridge_m0_waitrequest,                    //                                              .waitrequest
		input  wire [0:0]  peripheral_bridge_m0_burstcount,                     //                                              .burstcount
		input  wire [3:0]  peripheral_bridge_m0_byteenable,                     //                                              .byteenable
		input  wire        peripheral_bridge_m0_read,                           //                                              .read
		output wire [31:0] peripheral_bridge_m0_readdata,                       //                                              .readdata
		output wire        peripheral_bridge_m0_readdatavalid,                  //                                              .readdatavalid
		input  wire        peripheral_bridge_m0_write,                          //                                              .write
		input  wire [31:0] peripheral_bridge_m0_writedata,                      //                                              .writedata
		input  wire        peripheral_bridge_m0_debugaccess,                    //                                              .debugaccess
		output wire [1:0]  button_pio_s1_address,                               //                                 button_pio_s1.address
		output wire        button_pio_s1_write,                                 //                                              .write
		input  wire [31:0] button_pio_s1_readdata,                              //                                              .readdata
		output wire [31:0] button_pio_s1_writedata,                             //                                              .writedata
		output wire        button_pio_s1_chipselect,                            //                                              .chipselect
		output wire [2:0]  high_res_timer_s1_address,                           //                             high_res_timer_s1.address
		output wire        high_res_timer_s1_write,                             //                                              .write
		input  wire [15:0] high_res_timer_s1_readdata,                          //                                              .readdata
		output wire [15:0] high_res_timer_s1_writedata,                         //                                              .writedata
		output wire        high_res_timer_s1_chipselect,                        //                                              .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                 //                   jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                   //                                              .write
		output wire        jtag_uart_avalon_jtag_slave_read,                    //                                              .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                //                                              .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,               //                                              .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,             //                                              .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,              //                                              .chipselect
		output wire [1:0]  led_pio_s1_address,                                  //                                    led_pio_s1.address
		output wire        led_pio_s1_write,                                    //                                              .write
		input  wire [31:0] led_pio_s1_readdata,                                 //                                              .readdata
		output wire [31:0] led_pio_s1_writedata,                                //                                              .writedata
		output wire        led_pio_s1_chipselect,                               //                                              .chipselect
		output wire [3:0]  performance_counter_control_slave_address,           //             performance_counter_control_slave.address
		output wire        performance_counter_control_slave_write,             //                                              .write
		input  wire [31:0] performance_counter_control_slave_readdata,          //                                              .readdata
		output wire [31:0] performance_counter_control_slave_writedata,         //                                              .writedata
		output wire        performance_counter_control_slave_begintransfer,     //                                              .begintransfer
		output wire [2:0]  sys_clk_timer_s1_address,                            //                              sys_clk_timer_s1.address
		output wire        sys_clk_timer_s1_write,                              //                                              .write
		input  wire [15:0] sys_clk_timer_s1_readdata,                           //                                              .readdata
		output wire [15:0] sys_clk_timer_s1_writedata,                          //                                              .writedata
		output wire        sys_clk_timer_s1_chipselect                          //                                              .chipselect
	);

	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // peripheral_bridge_m0_agent:av_waitrequest -> peripheral_bridge_m0_translator:uav_waitrequest
	wire  [31:0] peripheral_bridge_m0_translator_avalon_universal_master_0_readdata;      // peripheral_bridge_m0_agent:av_readdata -> peripheral_bridge_m0_translator:uav_readdata
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // peripheral_bridge_m0_translator:uav_debugaccess -> peripheral_bridge_m0_agent:av_debugaccess
	wire   [7:0] peripheral_bridge_m0_translator_avalon_universal_master_0_address;       // peripheral_bridge_m0_translator:uav_address -> peripheral_bridge_m0_agent:av_address
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_read;          // peripheral_bridge_m0_translator:uav_read -> peripheral_bridge_m0_agent:av_read
	wire   [3:0] peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable;    // peripheral_bridge_m0_translator:uav_byteenable -> peripheral_bridge_m0_agent:av_byteenable
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // peripheral_bridge_m0_agent:av_readdatavalid -> peripheral_bridge_m0_translator:uav_readdatavalid
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_lock;          // peripheral_bridge_m0_translator:uav_lock -> peripheral_bridge_m0_agent:av_lock
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_write;         // peripheral_bridge_m0_translator:uav_write -> peripheral_bridge_m0_agent:av_write
	wire  [31:0] peripheral_bridge_m0_translator_avalon_universal_master_0_writedata;     // peripheral_bridge_m0_translator:uav_writedata -> peripheral_bridge_m0_agent:av_writedata
	wire   [2:0] peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount;    // peripheral_bridge_m0_translator:uav_burstcount -> peripheral_bridge_m0_agent:av_burstcount
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                           // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                        // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                        // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [7:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                            // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                         // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_avalon_jtag_slave_agent_m0_read;                               // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire         jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                      // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_avalon_jtag_slave_agent_m0_lock;                               // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                          // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_write;                              // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                         // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                       // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [82:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;               // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                 // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                    // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [82:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                    // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [81:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                       // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [5:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] performance_counter_control_slave_agent_m0_readdata;                     // performance_counter_control_slave_translator:uav_readdata -> performance_counter_control_slave_agent:m0_readdata
	wire         performance_counter_control_slave_agent_m0_waitrequest;                  // performance_counter_control_slave_translator:uav_waitrequest -> performance_counter_control_slave_agent:m0_waitrequest
	wire         performance_counter_control_slave_agent_m0_debugaccess;                  // performance_counter_control_slave_agent:m0_debugaccess -> performance_counter_control_slave_translator:uav_debugaccess
	wire   [7:0] performance_counter_control_slave_agent_m0_address;                      // performance_counter_control_slave_agent:m0_address -> performance_counter_control_slave_translator:uav_address
	wire   [3:0] performance_counter_control_slave_agent_m0_byteenable;                   // performance_counter_control_slave_agent:m0_byteenable -> performance_counter_control_slave_translator:uav_byteenable
	wire         performance_counter_control_slave_agent_m0_read;                         // performance_counter_control_slave_agent:m0_read -> performance_counter_control_slave_translator:uav_read
	wire         performance_counter_control_slave_agent_m0_readdatavalid;                // performance_counter_control_slave_translator:uav_readdatavalid -> performance_counter_control_slave_agent:m0_readdatavalid
	wire         performance_counter_control_slave_agent_m0_lock;                         // performance_counter_control_slave_agent:m0_lock -> performance_counter_control_slave_translator:uav_lock
	wire  [31:0] performance_counter_control_slave_agent_m0_writedata;                    // performance_counter_control_slave_agent:m0_writedata -> performance_counter_control_slave_translator:uav_writedata
	wire         performance_counter_control_slave_agent_m0_write;                        // performance_counter_control_slave_agent:m0_write -> performance_counter_control_slave_translator:uav_write
	wire   [2:0] performance_counter_control_slave_agent_m0_burstcount;                   // performance_counter_control_slave_agent:m0_burstcount -> performance_counter_control_slave_translator:uav_burstcount
	wire         performance_counter_control_slave_agent_rf_source_valid;                 // performance_counter_control_slave_agent:rf_source_valid -> performance_counter_control_slave_agent_rsp_fifo:in_valid
	wire  [82:0] performance_counter_control_slave_agent_rf_source_data;                  // performance_counter_control_slave_agent:rf_source_data -> performance_counter_control_slave_agent_rsp_fifo:in_data
	wire         performance_counter_control_slave_agent_rf_source_ready;                 // performance_counter_control_slave_agent_rsp_fifo:in_ready -> performance_counter_control_slave_agent:rf_source_ready
	wire         performance_counter_control_slave_agent_rf_source_startofpacket;         // performance_counter_control_slave_agent:rf_source_startofpacket -> performance_counter_control_slave_agent_rsp_fifo:in_startofpacket
	wire         performance_counter_control_slave_agent_rf_source_endofpacket;           // performance_counter_control_slave_agent:rf_source_endofpacket -> performance_counter_control_slave_agent_rsp_fifo:in_endofpacket
	wire         performance_counter_control_slave_agent_rsp_fifo_out_valid;              // performance_counter_control_slave_agent_rsp_fifo:out_valid -> performance_counter_control_slave_agent:rf_sink_valid
	wire  [82:0] performance_counter_control_slave_agent_rsp_fifo_out_data;               // performance_counter_control_slave_agent_rsp_fifo:out_data -> performance_counter_control_slave_agent:rf_sink_data
	wire         performance_counter_control_slave_agent_rsp_fifo_out_ready;              // performance_counter_control_slave_agent:rf_sink_ready -> performance_counter_control_slave_agent_rsp_fifo:out_ready
	wire         performance_counter_control_slave_agent_rsp_fifo_out_startofpacket;      // performance_counter_control_slave_agent_rsp_fifo:out_startofpacket -> performance_counter_control_slave_agent:rf_sink_startofpacket
	wire         performance_counter_control_slave_agent_rsp_fifo_out_endofpacket;        // performance_counter_control_slave_agent_rsp_fifo:out_endofpacket -> performance_counter_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                   // cmd_mux_001:src_valid -> performance_counter_control_slave_agent:cp_valid
	wire  [81:0] cmd_mux_001_src_data;                                                    // cmd_mux_001:src_data -> performance_counter_control_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                   // performance_counter_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [5:0] cmd_mux_001_src_channel;                                                 // cmd_mux_001:src_channel -> performance_counter_control_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                           // cmd_mux_001:src_startofpacket -> performance_counter_control_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                             // cmd_mux_001:src_endofpacket -> performance_counter_control_slave_agent:cp_endofpacket
	wire  [31:0] sys_clk_timer_s1_agent_m0_readdata;                                      // sys_clk_timer_s1_translator:uav_readdata -> sys_clk_timer_s1_agent:m0_readdata
	wire         sys_clk_timer_s1_agent_m0_waitrequest;                                   // sys_clk_timer_s1_translator:uav_waitrequest -> sys_clk_timer_s1_agent:m0_waitrequest
	wire         sys_clk_timer_s1_agent_m0_debugaccess;                                   // sys_clk_timer_s1_agent:m0_debugaccess -> sys_clk_timer_s1_translator:uav_debugaccess
	wire   [7:0] sys_clk_timer_s1_agent_m0_address;                                       // sys_clk_timer_s1_agent:m0_address -> sys_clk_timer_s1_translator:uav_address
	wire   [3:0] sys_clk_timer_s1_agent_m0_byteenable;                                    // sys_clk_timer_s1_agent:m0_byteenable -> sys_clk_timer_s1_translator:uav_byteenable
	wire         sys_clk_timer_s1_agent_m0_read;                                          // sys_clk_timer_s1_agent:m0_read -> sys_clk_timer_s1_translator:uav_read
	wire         sys_clk_timer_s1_agent_m0_readdatavalid;                                 // sys_clk_timer_s1_translator:uav_readdatavalid -> sys_clk_timer_s1_agent:m0_readdatavalid
	wire         sys_clk_timer_s1_agent_m0_lock;                                          // sys_clk_timer_s1_agent:m0_lock -> sys_clk_timer_s1_translator:uav_lock
	wire  [31:0] sys_clk_timer_s1_agent_m0_writedata;                                     // sys_clk_timer_s1_agent:m0_writedata -> sys_clk_timer_s1_translator:uav_writedata
	wire         sys_clk_timer_s1_agent_m0_write;                                         // sys_clk_timer_s1_agent:m0_write -> sys_clk_timer_s1_translator:uav_write
	wire   [2:0] sys_clk_timer_s1_agent_m0_burstcount;                                    // sys_clk_timer_s1_agent:m0_burstcount -> sys_clk_timer_s1_translator:uav_burstcount
	wire         sys_clk_timer_s1_agent_rf_source_valid;                                  // sys_clk_timer_s1_agent:rf_source_valid -> sys_clk_timer_s1_agent_rsp_fifo:in_valid
	wire  [82:0] sys_clk_timer_s1_agent_rf_source_data;                                   // sys_clk_timer_s1_agent:rf_source_data -> sys_clk_timer_s1_agent_rsp_fifo:in_data
	wire         sys_clk_timer_s1_agent_rf_source_ready;                                  // sys_clk_timer_s1_agent_rsp_fifo:in_ready -> sys_clk_timer_s1_agent:rf_source_ready
	wire         sys_clk_timer_s1_agent_rf_source_startofpacket;                          // sys_clk_timer_s1_agent:rf_source_startofpacket -> sys_clk_timer_s1_agent_rsp_fifo:in_startofpacket
	wire         sys_clk_timer_s1_agent_rf_source_endofpacket;                            // sys_clk_timer_s1_agent:rf_source_endofpacket -> sys_clk_timer_s1_agent_rsp_fifo:in_endofpacket
	wire         sys_clk_timer_s1_agent_rsp_fifo_out_valid;                               // sys_clk_timer_s1_agent_rsp_fifo:out_valid -> sys_clk_timer_s1_agent:rf_sink_valid
	wire  [82:0] sys_clk_timer_s1_agent_rsp_fifo_out_data;                                // sys_clk_timer_s1_agent_rsp_fifo:out_data -> sys_clk_timer_s1_agent:rf_sink_data
	wire         sys_clk_timer_s1_agent_rsp_fifo_out_ready;                               // sys_clk_timer_s1_agent:rf_sink_ready -> sys_clk_timer_s1_agent_rsp_fifo:out_ready
	wire         sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket;                       // sys_clk_timer_s1_agent_rsp_fifo:out_startofpacket -> sys_clk_timer_s1_agent:rf_sink_startofpacket
	wire         sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket;                         // sys_clk_timer_s1_agent_rsp_fifo:out_endofpacket -> sys_clk_timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                   // cmd_mux_002:src_valid -> sys_clk_timer_s1_agent:cp_valid
	wire  [81:0] cmd_mux_002_src_data;                                                    // cmd_mux_002:src_data -> sys_clk_timer_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                   // sys_clk_timer_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [5:0] cmd_mux_002_src_channel;                                                 // cmd_mux_002:src_channel -> sys_clk_timer_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                           // cmd_mux_002:src_startofpacket -> sys_clk_timer_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                             // cmd_mux_002:src_endofpacket -> sys_clk_timer_s1_agent:cp_endofpacket
	wire  [31:0] high_res_timer_s1_agent_m0_readdata;                                     // high_res_timer_s1_translator:uav_readdata -> high_res_timer_s1_agent:m0_readdata
	wire         high_res_timer_s1_agent_m0_waitrequest;                                  // high_res_timer_s1_translator:uav_waitrequest -> high_res_timer_s1_agent:m0_waitrequest
	wire         high_res_timer_s1_agent_m0_debugaccess;                                  // high_res_timer_s1_agent:m0_debugaccess -> high_res_timer_s1_translator:uav_debugaccess
	wire   [7:0] high_res_timer_s1_agent_m0_address;                                      // high_res_timer_s1_agent:m0_address -> high_res_timer_s1_translator:uav_address
	wire   [3:0] high_res_timer_s1_agent_m0_byteenable;                                   // high_res_timer_s1_agent:m0_byteenable -> high_res_timer_s1_translator:uav_byteenable
	wire         high_res_timer_s1_agent_m0_read;                                         // high_res_timer_s1_agent:m0_read -> high_res_timer_s1_translator:uav_read
	wire         high_res_timer_s1_agent_m0_readdatavalid;                                // high_res_timer_s1_translator:uav_readdatavalid -> high_res_timer_s1_agent:m0_readdatavalid
	wire         high_res_timer_s1_agent_m0_lock;                                         // high_res_timer_s1_agent:m0_lock -> high_res_timer_s1_translator:uav_lock
	wire  [31:0] high_res_timer_s1_agent_m0_writedata;                                    // high_res_timer_s1_agent:m0_writedata -> high_res_timer_s1_translator:uav_writedata
	wire         high_res_timer_s1_agent_m0_write;                                        // high_res_timer_s1_agent:m0_write -> high_res_timer_s1_translator:uav_write
	wire   [2:0] high_res_timer_s1_agent_m0_burstcount;                                   // high_res_timer_s1_agent:m0_burstcount -> high_res_timer_s1_translator:uav_burstcount
	wire         high_res_timer_s1_agent_rf_source_valid;                                 // high_res_timer_s1_agent:rf_source_valid -> high_res_timer_s1_agent_rsp_fifo:in_valid
	wire  [82:0] high_res_timer_s1_agent_rf_source_data;                                  // high_res_timer_s1_agent:rf_source_data -> high_res_timer_s1_agent_rsp_fifo:in_data
	wire         high_res_timer_s1_agent_rf_source_ready;                                 // high_res_timer_s1_agent_rsp_fifo:in_ready -> high_res_timer_s1_agent:rf_source_ready
	wire         high_res_timer_s1_agent_rf_source_startofpacket;                         // high_res_timer_s1_agent:rf_source_startofpacket -> high_res_timer_s1_agent_rsp_fifo:in_startofpacket
	wire         high_res_timer_s1_agent_rf_source_endofpacket;                           // high_res_timer_s1_agent:rf_source_endofpacket -> high_res_timer_s1_agent_rsp_fifo:in_endofpacket
	wire         high_res_timer_s1_agent_rsp_fifo_out_valid;                              // high_res_timer_s1_agent_rsp_fifo:out_valid -> high_res_timer_s1_agent:rf_sink_valid
	wire  [82:0] high_res_timer_s1_agent_rsp_fifo_out_data;                               // high_res_timer_s1_agent_rsp_fifo:out_data -> high_res_timer_s1_agent:rf_sink_data
	wire         high_res_timer_s1_agent_rsp_fifo_out_ready;                              // high_res_timer_s1_agent:rf_sink_ready -> high_res_timer_s1_agent_rsp_fifo:out_ready
	wire         high_res_timer_s1_agent_rsp_fifo_out_startofpacket;                      // high_res_timer_s1_agent_rsp_fifo:out_startofpacket -> high_res_timer_s1_agent:rf_sink_startofpacket
	wire         high_res_timer_s1_agent_rsp_fifo_out_endofpacket;                        // high_res_timer_s1_agent_rsp_fifo:out_endofpacket -> high_res_timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                   // cmd_mux_003:src_valid -> high_res_timer_s1_agent:cp_valid
	wire  [81:0] cmd_mux_003_src_data;                                                    // cmd_mux_003:src_data -> high_res_timer_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                   // high_res_timer_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [5:0] cmd_mux_003_src_channel;                                                 // cmd_mux_003:src_channel -> high_res_timer_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                           // cmd_mux_003:src_startofpacket -> high_res_timer_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                             // cmd_mux_003:src_endofpacket -> high_res_timer_s1_agent:cp_endofpacket
	wire  [31:0] button_pio_s1_agent_m0_readdata;                                         // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire         button_pio_s1_agent_m0_waitrequest;                                      // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire         button_pio_s1_agent_m0_debugaccess;                                      // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [7:0] button_pio_s1_agent_m0_address;                                          // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire   [3:0] button_pio_s1_agent_m0_byteenable;                                       // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire         button_pio_s1_agent_m0_read;                                             // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire         button_pio_s1_agent_m0_readdatavalid;                                    // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire         button_pio_s1_agent_m0_lock;                                             // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire  [31:0] button_pio_s1_agent_m0_writedata;                                        // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire         button_pio_s1_agent_m0_write;                                            // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire   [2:0] button_pio_s1_agent_m0_burstcount;                                       // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire         button_pio_s1_agent_rf_source_valid;                                     // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [82:0] button_pio_s1_agent_rf_source_data;                                      // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire         button_pio_s1_agent_rf_source_ready;                                     // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire         button_pio_s1_agent_rf_source_startofpacket;                             // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         button_pio_s1_agent_rf_source_endofpacket;                               // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         button_pio_s1_agent_rsp_fifo_out_valid;                                  // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [82:0] button_pio_s1_agent_rsp_fifo_out_data;                                   // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire         button_pio_s1_agent_rsp_fifo_out_ready;                                  // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire         button_pio_s1_agent_rsp_fifo_out_startofpacket;                          // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire         button_pio_s1_agent_rsp_fifo_out_endofpacket;                            // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                   // cmd_mux_004:src_valid -> button_pio_s1_agent:cp_valid
	wire  [81:0] cmd_mux_004_src_data;                                                    // cmd_mux_004:src_data -> button_pio_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                   // button_pio_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [5:0] cmd_mux_004_src_channel;                                                 // cmd_mux_004:src_channel -> button_pio_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                           // cmd_mux_004:src_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                             // cmd_mux_004:src_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire  [31:0] led_pio_s1_agent_m0_readdata;                                            // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire         led_pio_s1_agent_m0_waitrequest;                                         // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire         led_pio_s1_agent_m0_debugaccess;                                         // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [7:0] led_pio_s1_agent_m0_address;                                             // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire   [3:0] led_pio_s1_agent_m0_byteenable;                                          // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire         led_pio_s1_agent_m0_read;                                                // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire         led_pio_s1_agent_m0_readdatavalid;                                       // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire         led_pio_s1_agent_m0_lock;                                                // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire  [31:0] led_pio_s1_agent_m0_writedata;                                           // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire         led_pio_s1_agent_m0_write;                                               // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire   [2:0] led_pio_s1_agent_m0_burstcount;                                          // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire         led_pio_s1_agent_rf_source_valid;                                        // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [82:0] led_pio_s1_agent_rf_source_data;                                         // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire         led_pio_s1_agent_rf_source_ready;                                        // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire         led_pio_s1_agent_rf_source_startofpacket;                                // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         led_pio_s1_agent_rf_source_endofpacket;                                  // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         led_pio_s1_agent_rsp_fifo_out_valid;                                     // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [82:0] led_pio_s1_agent_rsp_fifo_out_data;                                      // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire         led_pio_s1_agent_rsp_fifo_out_ready;                                     // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire         led_pio_s1_agent_rsp_fifo_out_startofpacket;                             // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire         led_pio_s1_agent_rsp_fifo_out_endofpacket;                               // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                   // cmd_mux_005:src_valid -> led_pio_s1_agent:cp_valid
	wire  [81:0] cmd_mux_005_src_data;                                                    // cmd_mux_005:src_data -> led_pio_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                   // led_pio_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [5:0] cmd_mux_005_src_channel;                                                 // cmd_mux_005:src_channel -> led_pio_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                           // cmd_mux_005:src_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                             // cmd_mux_005:src_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire         peripheral_bridge_m0_agent_cp_valid;                                     // peripheral_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [81:0] peripheral_bridge_m0_agent_cp_data;                                      // peripheral_bridge_m0_agent:cp_data -> router:sink_data
	wire         peripheral_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> peripheral_bridge_m0_agent:cp_ready
	wire         peripheral_bridge_m0_agent_cp_startofpacket;                             // peripheral_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         peripheral_bridge_m0_agent_cp_endofpacket;                               // peripheral_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_valid;                              // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_001:sink_valid
	wire  [81:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                               // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_001:sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rp_ready;                              // router_001:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                      // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [81:0] router_001_src_data;                                                     // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire   [5:0] router_001_src_channel;                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         performance_counter_control_slave_agent_rp_valid;                        // performance_counter_control_slave_agent:rp_valid -> router_002:sink_valid
	wire  [81:0] performance_counter_control_slave_agent_rp_data;                         // performance_counter_control_slave_agent:rp_data -> router_002:sink_data
	wire         performance_counter_control_slave_agent_rp_ready;                        // router_002:sink_ready -> performance_counter_control_slave_agent:rp_ready
	wire         performance_counter_control_slave_agent_rp_startofpacket;                // performance_counter_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         performance_counter_control_slave_agent_rp_endofpacket;                  // performance_counter_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                    // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [81:0] router_002_src_data;                                                     // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                    // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [5:0] router_002_src_channel;                                                  // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                            // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                              // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         sys_clk_timer_s1_agent_rp_valid;                                         // sys_clk_timer_s1_agent:rp_valid -> router_003:sink_valid
	wire  [81:0] sys_clk_timer_s1_agent_rp_data;                                          // sys_clk_timer_s1_agent:rp_data -> router_003:sink_data
	wire         sys_clk_timer_s1_agent_rp_ready;                                         // router_003:sink_ready -> sys_clk_timer_s1_agent:rp_ready
	wire         sys_clk_timer_s1_agent_rp_startofpacket;                                 // sys_clk_timer_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sys_clk_timer_s1_agent_rp_endofpacket;                                   // sys_clk_timer_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                    // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [81:0] router_003_src_data;                                                     // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                    // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [5:0] router_003_src_channel;                                                  // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                            // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                              // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         high_res_timer_s1_agent_rp_valid;                                        // high_res_timer_s1_agent:rp_valid -> router_004:sink_valid
	wire  [81:0] high_res_timer_s1_agent_rp_data;                                         // high_res_timer_s1_agent:rp_data -> router_004:sink_data
	wire         high_res_timer_s1_agent_rp_ready;                                        // router_004:sink_ready -> high_res_timer_s1_agent:rp_ready
	wire         high_res_timer_s1_agent_rp_startofpacket;                                // high_res_timer_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         high_res_timer_s1_agent_rp_endofpacket;                                  // high_res_timer_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                    // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [81:0] router_004_src_data;                                                     // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                    // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [5:0] router_004_src_channel;                                                  // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                            // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                              // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         button_pio_s1_agent_rp_valid;                                            // button_pio_s1_agent:rp_valid -> router_005:sink_valid
	wire  [81:0] button_pio_s1_agent_rp_data;                                             // button_pio_s1_agent:rp_data -> router_005:sink_data
	wire         button_pio_s1_agent_rp_ready;                                            // router_005:sink_ready -> button_pio_s1_agent:rp_ready
	wire         button_pio_s1_agent_rp_startofpacket;                                    // button_pio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         button_pio_s1_agent_rp_endofpacket;                                      // button_pio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                    // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [81:0] router_005_src_data;                                                     // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                    // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [5:0] router_005_src_channel;                                                  // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                            // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                              // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         led_pio_s1_agent_rp_valid;                                               // led_pio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [81:0] led_pio_s1_agent_rp_data;                                                // led_pio_s1_agent:rp_data -> router_006:sink_data
	wire         led_pio_s1_agent_rp_ready;                                               // router_006:sink_ready -> led_pio_s1_agent:rp_ready
	wire         led_pio_s1_agent_rp_startofpacket;                                       // led_pio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         led_pio_s1_agent_rp_endofpacket;                                         // led_pio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                    // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [81:0] router_006_src_data;                                                     // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                    // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [5:0] router_006_src_channel;                                                  // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                            // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                              // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_src_valid;                                                        // router:src_valid -> peripheral_bridge_m0_limiter:cmd_sink_valid
	wire  [81:0] router_src_data;                                                         // router:src_data -> peripheral_bridge_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                        // peripheral_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [5:0] router_src_channel;                                                      // router:src_channel -> peripheral_bridge_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                // router:src_startofpacket -> peripheral_bridge_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                  // router:src_endofpacket -> peripheral_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [81:0] peripheral_bridge_m0_limiter_cmd_src_data;                               // peripheral_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         peripheral_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> peripheral_bridge_m0_limiter:cmd_src_ready
	wire   [5:0] peripheral_bridge_m0_limiter_cmd_src_channel;                            // peripheral_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         peripheral_bridge_m0_limiter_cmd_src_startofpacket;                      // peripheral_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         peripheral_bridge_m0_limiter_cmd_src_endofpacket;                        // peripheral_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> peripheral_bridge_m0_limiter:rsp_sink_valid
	wire  [81:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> peripheral_bridge_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                       // peripheral_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [5:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> peripheral_bridge_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> peripheral_bridge_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> peripheral_bridge_m0_limiter:rsp_sink_endofpacket
	wire         peripheral_bridge_m0_limiter_rsp_src_valid;                              // peripheral_bridge_m0_limiter:rsp_src_valid -> peripheral_bridge_m0_agent:rp_valid
	wire  [81:0] peripheral_bridge_m0_limiter_rsp_src_data;                               // peripheral_bridge_m0_limiter:rsp_src_data -> peripheral_bridge_m0_agent:rp_data
	wire         peripheral_bridge_m0_limiter_rsp_src_ready;                              // peripheral_bridge_m0_agent:rp_ready -> peripheral_bridge_m0_limiter:rsp_src_ready
	wire   [5:0] peripheral_bridge_m0_limiter_rsp_src_channel;                            // peripheral_bridge_m0_limiter:rsp_src_channel -> peripheral_bridge_m0_agent:rp_channel
	wire         peripheral_bridge_m0_limiter_rsp_src_startofpacket;                      // peripheral_bridge_m0_limiter:rsp_src_startofpacket -> peripheral_bridge_m0_agent:rp_startofpacket
	wire         peripheral_bridge_m0_limiter_rsp_src_endofpacket;                        // peripheral_bridge_m0_limiter:rsp_src_endofpacket -> peripheral_bridge_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [81:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [5:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [81:0] cmd_demux_src1_data;                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [5:0] cmd_demux_src1_channel;                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [81:0] cmd_demux_src2_data;                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [5:0] cmd_demux_src2_channel;                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                    // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [81:0] cmd_demux_src3_data;                                                     // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                    // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [5:0] cmd_demux_src3_channel;                                                  // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                            // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                              // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                    // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [81:0] cmd_demux_src4_data;                                                     // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                    // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [5:0] cmd_demux_src4_channel;                                                  // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                            // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                              // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                    // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [81:0] cmd_demux_src5_data;                                                     // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                    // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [5:0] cmd_demux_src5_channel;                                                  // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                            // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                              // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [81:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [5:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [81:0] rsp_demux_001_src0_data;                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [5:0] rsp_demux_001_src0_channel;                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [81:0] rsp_demux_002_src0_data;                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [5:0] rsp_demux_002_src0_channel;                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [81:0] rsp_demux_003_src0_data;                                                 // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [5:0] rsp_demux_003_src0_channel;                                              // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                        // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                          // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [81:0] rsp_demux_004_src0_data;                                                 // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [5:0] rsp_demux_004_src0_channel;                                              // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                        // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                          // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [81:0] rsp_demux_005_src0_data;                                                 // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [5:0] rsp_demux_005_src0_channel;                                              // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                        // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                          // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire   [5:0] peripheral_bridge_m0_limiter_cmd_valid_data;                             // peripheral_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                  // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                   // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                  // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                           // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         performance_counter_control_slave_agent_rdata_fifo_src_valid;            // performance_counter_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] performance_counter_control_slave_agent_rdata_fifo_src_data;             // performance_counter_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         performance_counter_control_slave_agent_rdata_fifo_src_ready;            // avalon_st_adapter_001:in_0_ready -> performance_counter_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                       // avalon_st_adapter_001:out_0_valid -> performance_counter_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                        // avalon_st_adapter_001:out_0_data -> performance_counter_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                       // performance_counter_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                       // avalon_st_adapter_001:out_0_error -> performance_counter_control_slave_agent:rdata_fifo_sink_error
	wire         sys_clk_timer_s1_agent_rdata_fifo_src_valid;                             // sys_clk_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] sys_clk_timer_s1_agent_rdata_fifo_src_data;                              // sys_clk_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         sys_clk_timer_s1_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_002:in_0_ready -> sys_clk_timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                       // avalon_st_adapter_002:out_0_valid -> sys_clk_timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                        // avalon_st_adapter_002:out_0_data -> sys_clk_timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                       // sys_clk_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                       // avalon_st_adapter_002:out_0_error -> sys_clk_timer_s1_agent:rdata_fifo_sink_error
	wire         high_res_timer_s1_agent_rdata_fifo_src_valid;                            // high_res_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] high_res_timer_s1_agent_rdata_fifo_src_data;                             // high_res_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         high_res_timer_s1_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_003:in_0_ready -> high_res_timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                       // avalon_st_adapter_003:out_0_valid -> high_res_timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                        // avalon_st_adapter_003:out_0_data -> high_res_timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                       // high_res_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                       // avalon_st_adapter_003:out_0_error -> high_res_timer_s1_agent:rdata_fifo_sink_error
	wire         button_pio_s1_agent_rdata_fifo_src_valid;                                // button_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] button_pio_s1_agent_rdata_fifo_src_data;                                 // button_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         button_pio_s1_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_004:in_0_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                       // avalon_st_adapter_004:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                        // avalon_st_adapter_004:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                       // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                       // avalon_st_adapter_004:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error
	wire         led_pio_s1_agent_rdata_fifo_src_valid;                                   // led_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                    // led_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         led_pio_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_005:in_0_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                       // avalon_st_adapter_005:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                        // avalon_st_adapter_005:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                       // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                       // avalon_st_adapter_005:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (8),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (8),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) peripheral_bridge_m0_translator (
		.clk                    (clk_clk_clk),                                                             //                       clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (peripheral_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (peripheral_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (peripheral_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (peripheral_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (peripheral_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (peripheral_bridge_m0_read),                                               //                          .read
		.av_readdata            (peripheral_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (peripheral_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (peripheral_bridge_m0_write),                                              //                          .write
		.av_writedata           (peripheral_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (peripheral_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_clk_clk),                                         //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),           //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                   //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                    //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),               //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),             //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),              //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) performance_counter_control_slave_translator (
		.clk                    (clk_clk_clk),                                              //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (performance_counter_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (performance_counter_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (performance_counter_control_slave_agent_m0_read),          //                         .read
		.uav_write              (performance_counter_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (performance_counter_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (performance_counter_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (performance_counter_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (performance_counter_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (performance_counter_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (performance_counter_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (performance_counter_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (performance_counter_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (performance_counter_control_slave_write),                  //                         .write
		.av_readdata            (performance_counter_control_slave_readdata),               //                         .readdata
		.av_writedata           (performance_counter_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (performance_counter_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_clk_timer_s1_translator (
		.clk                    (clk_clk_clk),                                         //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_clk_timer_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sys_clk_timer_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sys_clk_timer_s1_agent_m0_read),                      //                         .read
		.uav_write              (sys_clk_timer_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sys_clk_timer_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sys_clk_timer_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sys_clk_timer_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sys_clk_timer_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sys_clk_timer_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sys_clk_timer_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sys_clk_timer_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sys_clk_timer_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (sys_clk_timer_s1_write),                              //                         .write
		.av_readdata            (sys_clk_timer_s1_readdata),                           //                         .readdata
		.av_writedata           (sys_clk_timer_s1_writedata),                          //                         .writedata
		.av_chipselect          (sys_clk_timer_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) high_res_timer_s1_translator (
		.clk                    (clk_clk_clk),                                         //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (high_res_timer_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (high_res_timer_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (high_res_timer_s1_agent_m0_read),                     //                         .read
		.uav_write              (high_res_timer_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (high_res_timer_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (high_res_timer_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (high_res_timer_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (high_res_timer_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (high_res_timer_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (high_res_timer_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (high_res_timer_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (high_res_timer_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (high_res_timer_s1_write),                             //                         .write
		.av_readdata            (high_res_timer_s1_readdata),                          //                         .readdata
		.av_writedata           (high_res_timer_s1_writedata),                         //                         .writedata
		.av_chipselect          (high_res_timer_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (clk_clk_clk),                                         //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                         //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (button_pio_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                                 //                         .write
		.av_readdata            (button_pio_s1_readdata),                              //                         .readdata
		.av_writedata           (button_pio_s1_writedata),                             //                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (clk_clk_clk),                                         //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                            //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (led_pio_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                    //                         .write
		.av_readdata            (led_pio_s1_readdata),                                 //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                                //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_QOS_H                 (62),
		.PKT_QOS_L                 (62),
		.PKT_DATA_SIDEBAND_H       (60),
		.PKT_DATA_SIDEBAND_L       (60),
		.PKT_ADDR_SIDEBAND_H       (59),
		.PKT_ADDR_SIDEBAND_L       (59),
		.PKT_BURST_TYPE_H          (58),
		.PKT_BURST_TYPE_L          (57),
		.PKT_CACHE_H               (76),
		.PKT_CACHE_L               (73),
		.PKT_THREAD_ID_H           (69),
		.PKT_THREAD_ID_L           (69),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_EXCLUSIVE       (49),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.ST_DATA_W                 (82),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) peripheral_bridge_m0_agent (
		.clk                   (clk_clk_clk),                                                             //       clk.clk
		.reset                 (peripheral_bridge_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (peripheral_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (peripheral_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (peripheral_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (peripheral_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (peripheral_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (peripheral_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (peripheral_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (peripheral_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (peripheral_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (peripheral_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (peripheral_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (peripheral_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) performance_counter_control_slave_agent (
		.clk                     (clk_clk_clk),                                                        //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (performance_counter_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (performance_counter_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (performance_counter_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (performance_counter_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (performance_counter_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (performance_counter_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (performance_counter_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (performance_counter_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (performance_counter_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (performance_counter_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (performance_counter_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (performance_counter_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (performance_counter_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (performance_counter_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (performance_counter_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (performance_counter_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                            //                .channel
		.rf_sink_ready           (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (performance_counter_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (performance_counter_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (performance_counter_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (performance_counter_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (performance_counter_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (performance_counter_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (performance_counter_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (performance_counter_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (performance_counter_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) performance_counter_control_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                        //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (performance_counter_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (performance_counter_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (performance_counter_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (performance_counter_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (performance_counter_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (performance_counter_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_clk_timer_s1_agent (
		.clk                     (clk_clk_clk),                                         //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sys_clk_timer_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (sys_clk_timer_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (sys_clk_timer_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (sys_clk_timer_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (sys_clk_timer_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (sys_clk_timer_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (sys_clk_timer_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (sys_clk_timer_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (sys_clk_timer_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (sys_clk_timer_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (sys_clk_timer_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (sys_clk_timer_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (sys_clk_timer_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (sys_clk_timer_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (sys_clk_timer_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (sys_clk_timer_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (sys_clk_timer_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (sys_clk_timer_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (sys_clk_timer_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (sys_clk_timer_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (sys_clk_timer_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (sys_clk_timer_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (sys_clk_timer_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (sys_clk_timer_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (sys_clk_timer_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_clk_timer_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (sys_clk_timer_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_clk_timer_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                         //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_clk_timer_s1_agent_rf_source_data),               //        in.data
		.in_valid          (sys_clk_timer_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (sys_clk_timer_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sys_clk_timer_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sys_clk_timer_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sys_clk_timer_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sys_clk_timer_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sys_clk_timer_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) high_res_timer_s1_agent (
		.clk                     (clk_clk_clk),                                         //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (high_res_timer_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (high_res_timer_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (high_res_timer_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (high_res_timer_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (high_res_timer_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (high_res_timer_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (high_res_timer_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (high_res_timer_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (high_res_timer_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (high_res_timer_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (high_res_timer_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (high_res_timer_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (high_res_timer_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (high_res_timer_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (high_res_timer_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (high_res_timer_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                             //                .channel
		.rf_sink_ready           (high_res_timer_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (high_res_timer_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (high_res_timer_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (high_res_timer_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (high_res_timer_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (high_res_timer_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (high_res_timer_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (high_res_timer_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (high_res_timer_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (high_res_timer_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (high_res_timer_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (high_res_timer_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (high_res_timer_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) high_res_timer_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                         //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (high_res_timer_s1_agent_rf_source_data),              //        in.data
		.in_valid          (high_res_timer_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (high_res_timer_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (high_res_timer_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (high_res_timer_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (high_res_timer_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (high_res_timer_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (high_res_timer_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (high_res_timer_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (high_res_timer_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (clk_clk_clk),                                         //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                             //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                         //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (clk_clk_clk),                                         //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                             //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                         //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_router router (
		.sink_ready         (peripheral_bridge_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (peripheral_bridge_m0_agent_cp_valid),                 //          .valid
		.sink_data          (peripheral_bridge_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (peripheral_bridge_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (peripheral_bridge_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                    //       src.ready
		.src_valid          (router_src_valid),                                    //          .valid
		.src_data           (router_src_data),                                     //          .data
		.src_channel        (router_src_channel),                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),          //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),           //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (performance_counter_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (performance_counter_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (performance_counter_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (performance_counter_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (performance_counter_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                              //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (sys_clk_timer_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sys_clk_timer_s1_agent_rp_valid),                     //          .valid
		.sink_data          (sys_clk_timer_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (sys_clk_timer_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sys_clk_timer_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (high_res_timer_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (high_res_timer_s1_agent_rp_valid),                    //          .valid
		.sink_data          (high_res_timer_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (high_res_timer_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (high_res_timer_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                        //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_router_001 router_006 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                           //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (66),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (63),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (82),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) peripheral_bridge_m0_limiter (
		.clk                    (clk_clk_clk),                                         //       clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                    //          .valid
		.cmd_sink_data          (router_src_data),                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (peripheral_bridge_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (peripheral_bridge_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (peripheral_bridge_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (peripheral_bridge_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (peripheral_bridge_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (peripheral_bridge_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (peripheral_bridge_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (peripheral_bridge_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (peripheral_bridge_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (peripheral_bridge_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (peripheral_bridge_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (peripheral_bridge_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                                         //        clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (peripheral_bridge_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (peripheral_bridge_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (peripheral_bridge_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (peripheral_bridge_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (peripheral_bridge_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (peripheral_bridge_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                           //           .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                                         //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_clk_clk),                                         //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_clk_clk),                                         //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                              //          .channel
		.sink0_data          (cmd_demux_src2_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_clk_clk),                                         //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //          .valid
		.src_data            (cmd_mux_003_src_data),                                //          .data
		.src_channel         (cmd_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                              //          .channel
		.sink0_data          (cmd_demux_src3_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_clk_clk),                                         //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                              //          .channel
		.sink0_data          (cmd_demux_src4_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_clk_clk),                                         //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                              //          .channel
		.sink0_data          (cmd_demux_src5_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //      sink.ready
		.sink_channel       (router_001_src_channel),                              //          .channel
		.sink_data          (router_001_src_data),                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                //      sink.ready
		.sink_channel       (router_002_src_channel),                              //          .channel
		.sink_data          (router_002_src_data),                                 //          .data
		.sink_startofpacket (router_002_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_002_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                       //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                       //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                       //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_005_src0_data),                             //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                       //          .endofpacket
	);

	eth_std_main_system_peripheral_subsystem_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                                         //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //          .valid
		.src_data            (rsp_mux_src_data),                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                             //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                             //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                             //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                       //          .endofpacket
	);

	eth_std_main_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	eth_std_main_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (performance_counter_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (performance_counter_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (performance_counter_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                             //         .error
	);

	eth_std_main_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_clk_timer_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (sys_clk_timer_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (sys_clk_timer_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	eth_std_main_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (high_res_timer_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (high_res_timer_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (high_res_timer_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                    //         .error
	);

	eth_std_main_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                    //         .error
	);

	eth_std_main_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

endmodule
